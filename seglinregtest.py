import logging
import unittest
import numpy

import seglinreg


logging.basicConfig(format='%(asctime)s\t%(message)s', level=logging.INFO)


class SegLinRegTestCase(unittest.TestCase):
    def test_something(self):
        obj = seglinreg.SegLinReg(int(numpy.random.sample() * 5) + 2)

        normal = numpy.random.standard_normal(1 + numpy.random.sample() * 1000)

        data = []
        n = 0
        for val in normal:
            n += numpy.random.sample()
            data.append((n, val))

        data.append((n + 1, None))
        data.append((n + 2, None))
        data.append((n + 3, None))

        chunks = obj.calculate(data)
        logging.info("Result: %s", chunks)
        res=[val for val in chunks.get_regression_data()]

        self.assertEqual(len(res), len(data))

    def test_real1(self):
        test1 = [(0, 506224.0), (1, 535982.0), (2, 534981.0), (3, 542664.0), (4, 547944.0), (5, 541522.0),
                 (6, 536643.0), (7, 536203.0), (8, 521291.0), (9, 510602.0), (10, 508576.0), (11, 496740.0),
                 (12, 495249.0), (13, 491789.0), (14, 482204.0), (15, 468571.0), (16, 458209.0), (17, 432852.0),
                 (18, 433511.0), (19, 429606.0), (20, 398854.0), (21, None), (22, None), (23, None)]
        obj = seglinreg.SegLinReg(7)
        res = obj.calculate(test1)

    def test_real2(self):
        test1 = [(0, 71904.0), (1, None), (2, 67709.0), (3, None), (4, 67285.0), (5, None), (6, 69195.0), (7, None), (8, 65658.0), (9, None), (10, 69792.0), (11, None), (12, 70536.0), (13, None), (14, 70557.0), (15, None), (16, 73111.0), (17, None), (18, 75862.0), (19, None), (20, 76063.0), (21, None), (22, 86120.0), (23, None), (24, 93855.0), (25, None), (26, 108460.0), (27, None), (28, 125828.0), (29, 138363.0), (30, 153570.0), (31, 163663.0), (32, 172087.0), (33, 193410.0), (34, 204288.0), (35, 210385.0), (36, 230627.0), (37, 246666.0), (38, 261653.0), (39, 273139.0), (40, 289039.0), (41, 303571.0), (42, 320915.0), (43, 335340.0), (44, 344807.0), (45, 350922.0), (46, 367048.0), (47, 381013.0), (48, 387114.0), (49, None), (50, 409117.0), (51, 426089.0), (52, 438333.0), (53, None), (54, 457483.0), (55, 460780.0), (56, 471158.0), (57, 472816.0), (58, 470620.0), (59, 471110.0), (60, 456558.0), (61, 450758.0), (62, 449685.0), (63, 433632.0), (64, 435781.0), (65, 435683.0), (66, 432804.0), (67, 434797.0), (68, 431627.0), (69, 427334.0), (70, 428529.0), (71, 420578.0), (72, 442364.0), (73, 407138.0), (74, 406570.0), (75, 409014.0), (76, 414141.0), (77, 410726.0), (78, 423081.0), (79, 414632.0), (80, 422843.0), (81, 426898.0), (82, 436408.0), (83, 419636.0), (84, 422446.0), (85, 421977.0), (86, 427002.0), (87, 429413.0), (88, 417591.0), (89, 427550.0), (90, 424619.0), (91, 430755.0), (92, 424811.0), (93, 435150.0), (94, 416189.0), (95, 423597.0), (96, 413047.0), (97, 420754.0), (98, 425216.0), (99, 413913.0), (100, 425837.0), (101, 420123.0), (102, 422994.0), (103, 421041.0), (104, 417075.0), (105, 430373.0), (106, 430963.0), (107, 422963.0), (108, 420015.0), (109, 428893.0), (110, 422287.0), (111, 420043.0), (112, 425836.0), (113, 422760.0), (114, 421627.0), (115, 419039.0), (116, 422495.0), (117, 414447.0), (118, 427455.0), (119, 420702.0), (120, 431877.0), (121, 425975.0), (122, 424781.0), (123, 420973.0), (124, 418889.0), (125, 421920.0), (126, 428737.0), (127, 433991.0), (128, 434087.0), (129, 417494.0), (130, 428718.0), (131, 430798.0), (132, 429204.0), (133, 409045.0), (134, 428440.0), (135, 396417.0), (136, 415092.0), (137, 403576.0), (138, 421255.0), (139, 400815.0), (140, 414262.0), (141, 404645.0), (142, 389748.0), (143, 419216.0), (144, 411523.0), (145, 386822.0), (146, 393226.0), (147, 418498.0), (148, 393166.0), (149, 398119.0), (150, 392491.0), (151, 391867.0), (152, 401225.0), (153, 391980.0), (154, 393003.0), (155, 389373.0), (156, 394418.0), (157, 402042.0), (158, 408665.0), (159, 418924.0), (160, 437286.0), (161, 446457.0), (162, 449352.0), (163, 472787.0), (164, 468940.0), (165, 469327.0), (166, 472071.0), (167, 468016.0), (168, 467807.0), (169, 469283.0), (170, 474911.0), (171, 491348.0), (172, 510778.0), (173, 532320.0), (174, 525758.0), (175, 530800.0), (176, 530458.0), (177, 533521.0), (178, 529489.0), (179, 529218.0), (180, 527576.0), (181, 519932.0), (182, 504503.0), (183, 493398.0), (184, 494850.0), (185, 481679.0), (186, 472237.0), (187, 471881.0), (188, 468741.0), (189, 442471.0), (190, 436289.0), (191, 418245.0), (192, 397117.0), (193, 391508.0), (194, 386291.0), (195, 385817.0), (196, 381965.0), (197, 357302.0), (198, 353275.0), (199, 357876.0), (200, 332120.0), (201, 326548.0), (202, 322877.0), (203, 308602.0), (204, 303867.0), (205, 290147.0), (206, 286917.0), (207, 275660.0), (208, 270487.0), (209, 266210.0), (210, 262437.0), (211, 264915.0), (212, 239000.0), (213, 226298.0), (214, 239081.0), (215, 224667.0), (216, 223765.0), (217, 225639.0), (218, 209615.0), (219, 221696.0), (220, 216246.0), (221, 216383.0), (222, 208831.0), (223, 205241.0), (224, 196052.0), (225, 193344.0), (226, 187268.0), (227, 185255.0), (228, 179000.0), (229, 166115.0), (230, 166907.0), (231, 166600.0), (232, 159709.0), (233, 165959.0), (234, 159896.0), (235, 149942.0), (236, 140829.0), (237, 142794.0), (238, 137999.0), (239, 135141.0), (240, 131698.0), (241, 125132.0), (242, 121823.0), (243, 121424.0), (244, 118166.0), (245, 111003.0), (246, 109549.0), (247, 104676.0), (248, 106413.0), (249, 101087.0), (250, 98176.0), (251, 99700.0), (252, 94004.0), (253, 88756.0), (254, 88874.0), (255, 88812.0), (256, 88402.0), (257, 88914.0), (258, 85681.0), (259, 86584.0), (260, 85051.0), (261, 80567.0), (262, 80339.0), (263, 81354.0), (264, 77276.0), (265, 80721.0), (266, 82002.0), (267, 75909.0), (268, 74948.0), (269, 80033.0), (270, 73773.0), (271, 75631.0), (272, 73823.0), (273, 76962.0), (274, 75843.0), (275, 76436.0), (276, 75536.0), (277, 75628.0), (278, 75791.0), (279, 73271.0), (280, 73552.0), (281, 71447.0), (282, 72385.0), (283, 70651.0), (284, 73755.0), (285, 73420.0), (286, 72158.0), (287, 71004.0)]
        obj = seglinreg.SegLinReg(3)
        res = obj.calculate(test1)

if __name__ == '__main__':
    unittest.main()
